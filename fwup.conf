# Firmware configuration file for the NanoPi Neo2

require-fwup-version="1.3.0" # For the expand=true param

#
# Firmware metadata
#

# All of these can be overriden using environment variables of the same name.
#
#  Run 'fwup -m' to query values in a .fw file.
#  Use 'fw_printenv' to query values on the target.
#
# These are used by Nerves libraries to introspect.
define(NERVES_FW_PRODUCT, "Nerves Firmware")
define(NERVES_FW_DESCRIPTION, "")
define(NERVES_FW_VERSION, "${NERVES_SDK_VERSION}")
define(NERVES_FW_PLATFORM, "nanopi_neo2")
define(NERVES_FW_ARCHITECTURE, "aarch64")
define(NERVES_FW_AUTHOR, "Uptime")

define(NERVES_FW_DEVPATH, "/dev/mmcblk0")
define(NERVES_FW_APPLICATION_PART0_DEVPATH, "/dev/mmcblk0p3") # Linux part number is 1-based
define(NERVES_FW_APPLICATION_PART0_FSTYPE, "ext4")
define(NERVES_FW_APPLICATION_PART0_TARGET, "/root")
define(NERVES_PROVISIONING, "${NERVES_SYSTEM}/images/fwup_include/provisioning.conf")

# Default paths if not specified via the commandline
define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")

# This configuration file will create an image that
# has an MBR and the following layout:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | Bootloader firmware and    |
# | Firmware configuration data|
# | (formatted as uboot env)   |
# +----------------------------+
# | p0: Boot partition (FAT32) |
# | Image                      |
# | sun50i-h5-nanopi-neo2.dtb  |
# | boot.scr                   |
# +----------------------------+
# | p1: Rootfs (squashfs)      |
# +----------------------------+
# | p2: Application (ext4)     |
# +----------------------------+

# The Allwinner H5 SoC expects a second program loader (SPL) and associated FIT
# image, which contain the necessary firmware to boot the device. These files
# are provided by Buildroot as sunxi-spl.bin and u-boot.itb, and must be placed
# back-to-back beginning at the 16th sector. Their combined size is slightly
# more than 1024 sectors.
define(BOOTLOADER_FIRMWARE_OFFSET, 16)

# The offset and size of the U-Boot environment is controlled through the
# variables CONFIG_ENV_OFFSET and CONFIG_ENV_SIZE in the u-boot defconfig.
define-eval(UBOOT_ENV_OFFSET, 1088)
define(UBOOT_ENV_COUNT, 256) # 128 KB

# The boot partition contains Image, sun50i-h5-nanopi-neo2.dtb and boot.scr
define(BOOT_PART_OFFSET, 4096)
define(BOOT_PART_COUNT, 131072) # 64 MB

# Let the rootfs have room to grow up to 140 MiB and align it to the nearest 1
# MB boundary
define(ROOTFS_A_PART_OFFSET, 135168)
define(ROOTFS_A_PART_COUNT, 286720)

# Application partition. This partition will occupy all of the remaining space
# thanks to fwups expand=true param. The size here is defined as the minimum
# size and will be used if the destination's size can't be determined.
define-eval(APP_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(APP_PART_COUNT, 1048576)

# Firmware archive metadata
meta-product = ${NERVES_FW_PRODUCT}
meta-description = ${NERVES_FW_DESCRIPTION}
meta-version = ${NERVES_FW_VERSION}
meta-platform = ${NERVES_FW_PLATFORM}
meta-architecture = ${NERVES_FW_ARCHITECTURE}
meta-author = ${NERVES_FW_AUTHOR}
meta-vcs-identifier = ${NERVES_FW_VCS_IDENTIFIER}
meta-misc = ${NERVES_FW_MISC}

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource bootloader-firmware {
    # Concatenate sunxi-spl.bin and u-boot.itb
    host-path = "${NERVES_SYSTEM}/images/sunxi-spl.bin;${NERVES_SYSTEM}/images/u-boot.itb"
}
file-resource Image {
    host-path = "${NERVES_SYSTEM}/images/Image"
}
file-resource sun50i-h5-nanopi-neo2.dtb {
    host-path = "${NERVES_SYSTEM}/images/sun50i-h5-nanopi-neo2.dtb"
}
file-resource boot.scr {
    host-path = "${NERVES_SYSTEM}/images/boot.scr"
}
file-resource uboot-env.bin {
    host-path = "${NERVES_SYSTEM}/images/uboot-env.bin"
}
file-resource rootfs.img {
    host-path = ${ROOTFS}

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}

mbr mbr {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0x83 # Linux
    }
}

# Location where installed firmware information is stored.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run at the factory to initialize a board!
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr)

        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
        fat_setlabel(${BOOT_PART_OFFSET}, "BOOT")
    }

    on-resource bootloader-firmware { raw_write(${BOOTLOADER_FIRMWARE_OFFSET}) }

    on-resource uboot-env.bin {
        raw_write(${UBOOT_ENV_OFFSET})
        # Include provisioning instructions
        include("${NERVES_PROVISIONING}")

        # Add in the generic Nerves metadata variables.
        uboot_setenv(uboot-env, "nerves_fw_active", "a")
        uboot_setenv(uboot-env, "nerves_fw_devpath", ${NERVES_FW_DEVPATH})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_devpath", ${NERVES_FW_APPLICATION_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_fstype", ${NERVES_FW_APPLICATION_PART0_FSTYPE})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_target", ${NERVES_FW_APPLICATION_PART0_TARGET})
        uboot_setenv(uboot-env, "a.nerves_fw_product", ${NERVES_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.nerves_fw_description", ${NERVES_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.nerves_fw_version", ${NERVES_FW_VERSION})
        uboot_setenv(uboot-env, "a.nerves_fw_platform", ${NERVES_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.nerves_fw_architecture", ${NERVES_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.nerves_fw_author", ${NERVES_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.nerves_fw_vcs_identifier", ${NERVES_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.nerves_fw_misc", ${NERVES_FW_MISC})
        uboot_setenv(uboot-env, "a.nerves_fw_uuid", "\${FWUP_META_UUID}")
    }

    on-resource Image { fat_write(${BOOT_PART_OFFSET}, "Image") }
    on-resource sun50i-h5-nanopi-neo2.dtb { fat_write(${BOOT_PART_OFFSET}, "sun50i-h5-nanopi-neo2.dtb") }
    on-resource boot.scr { fat_write(${BOOT_PART_OFFSET}, "boot.scr") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Invalidate the application data partition so that it is guaranteed to
        # trigger the corrupt filesystem detection code on first boot and get
        # formatted. If this isn't done and an old SDCard is reused, the
        # application data could be in a weird state.
        raw_memset(${APP_PART_OFFSET}, 256, 0xff)
    }
}
